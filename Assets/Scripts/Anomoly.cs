using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

//handles the behavior of the anomolies on the screen
public class Anomoly : MonoBehaviour
{
    [SerializeField] private Transform myTranform = null;

    [SerializeField] private Animator myAnimator = null;

    [SerializeField] private float idleRotationSpeed = -110f;

    [SerializeField] private float destroyTime = 3f;

    [SerializeField] private float animatorTopSpeed = 2f;

    private Vector2 targetPosition = Vector2.zero;

    private Transform targetTransform = null;

    public Action<Anomoly, Transform> OnAnomolyRemoved;

    private bool beingDamaged = false;

    private bool destroyed = false;

    private float currentDestroyTime = 0f;

    private Transform destroyedTransform = null;

    public Action OnStartTakingDamage;
    public Action OnStopTakingDamage;

    public void Init(Transform _targetTransform, Transform _destroyedTransform)
    {
        targetTransform = _targetTransform;
        targetPosition = _targetTransform.position;
        destroyedTransform = _destroyedTransform;
    }

    private void Update()
    {
        UpdateBeingDamaged();
    }

    private void LateUpdate()
    {
        UpdatePositionAndRotation();
    }

    private void UpdateBeingDamaged()
    {
        if (beingDamaged && !destroyed)
        {
            currentDestroyTime += Time.deltaTime;
            myAnimator.speed += Time.deltaTime;

            if (myAnimator.speed >= animatorTopSpeed)
            {
                myAnimator.speed = animatorTopSpeed;
            }

            if (currentDestroyTime >= destroyTime)
            {
                destroyed = true;
                myAnimator.SetTrigger("Destroy");
                myTranform.SetParent(destroyedTransform);
                myAnimator.speed = 1f;
                OnStopTakingDamage?.Invoke();
            }
        }
    }

    private void UpdatePositionAndRotation()
    {
        myTranform.position = targetPosition;
        myTranform.Rotate(0f, 0f, idleRotationSpeed * Time.deltaTime);
    }

    //called from UI
    public void OnAnomolyClicked()
    {
        beingDamaged = true;
        myAnimator.SetBool("Damaged", true);
        OnStartTakingDamage?.Invoke();
    }

    //called from event handler on UI
    public void OnStopClick()
    {
        if (!destroyed)
        {
            beingDamaged = false;
            myAnimator.SetBool("Damaged", false);
            currentDestroyTime = 0f;
            myAnimator.speed = 1f;
            OnStopTakingDamage?.Invoke();
        }
    }

    //called from animator
    public void DestroyAnomoly()
    {
        OnAnomolyRemoved?.Invoke(this, targetTransform);
    }
}
